{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Cita.js","componentes/Listado.js","componentes/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","nombreMascotaRef","React","createRef","nombreDuenioRef","fechaRef","horaRef","sintomasRef","state","error","agregarCita","e","preventDefault","cita","id","uuid","nombreMascota","_this","current","value","nombreDuenio","fecha","hora","sintomas","setState","currentTarget","reset","existeError","this","onSubmit","type","placeholder","ref","required","Component","Cita","eliminarCita","borrarCita","_this$props$cita","onClick","Listado","title","Object","keys","citas","map","key","componentes_Cita","App","nuevaCita","toConsumableArray","concat","filter","citasLS","localStorage","getItem","JSON","parse","setItem","stringify","componentes_Header","componentes_Formulario","componentes_Listado","length","Boolean","window","location","hostname","match","ReactDOM","render","componentes_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d00128cf.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = props => {\n        return(\n                <header>\n                        <h1 className=\"text-center\">{props.titulo}</h1>\n                </header>\n        )\n}\n\nHeader.propTypes = {\n        titulo: PropTypes.string.isRequired\n}\nexport default Header;\n\n","import React, { Component } from 'react';\nimport uuid from 'uuid';\nimport PropTypes from 'prop-types';\n\nclass Formulario extends Component {\n\n    //refs para formulario de citas\n    nombreMascotaRef = React.createRef();\n    nombreDuenioRef = React.createRef();\n    fechaRef = React.createRef();\n    horaRef = React.createRef();\n    sintomasRef = React.createRef();\n\n    state = {\n        error: false\n    }\n    agregarCita = (e) => {\n\n        //Detenemos acción por default \n        e.preventDefault();\n\n        //creamos objeto\n        const cita = {\n            id:              uuid(),   \n            nombreMascota:   this.nombreMascotaRef.current.value,\n            nombreDuenio:    this.nombreDuenioRef.current.value,\n            fecha:           this.fechaRef.current.value,\n            hora:            this.horaRef.current.value,\n            sintomas:        this.sintomasRef.current.value\n        }\n\n        if(\n            cita.nombreMascota === '' || \n            cita.nombreDuenio === '' || \n            cita.fecha === '' || \n            cita.hora === '' || \n            cita.sintomas === ''\n            ) {\n                this.setState({\n                    error: true\n                })\n        } else {\n            //agregar y enviar el formulario\n            this.props.agregarCita(cita);\n\n            //limpiando el formulario\n            e.currentTarget.reset();\n            \n            //eliminar error\n            this.setState({error: false});\n\n        }\n        \n    }\n    \n    render() {\n        const existeError = this.state.error;\n        return (\n            <div className=\"card mt-5\">\n                <div className=\"card-body\">\n                    <h2 className=\"card-title text-center mb-5\">Agrega las citas aquí</h2>\n                     <form onSubmit={this.agregarCita}>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Mascota</label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Nombre Mascota\" ref={this.nombreMascotaRef} required/>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Dueño</label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <input type=\"text\" className=\"form-control\"  placeholder=\"Nombre Dueño de la Mascota\" ref={this.nombreDuenioRef}/>\n                            </div>\n                        </div>\n\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha</label>\n                            <div className=\"col-sm-8 col-lg-4  mb-4 mb-lg-0\">\n                                <input type=\"date\" className=\"form-control\" ref={this.fechaRef}/>\n                            </div>                            \n\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora</label>\n                            <div className=\"col-sm-8 col-lg-4\">\n                                <input type=\"time\" className=\"form-control\" ref={this.horaRef}/>\n                            </div>\n                        </div>\n\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Sintomas</label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <textarea  className=\"form-control\" ref={this.sintomasRef}></textarea>\n                            </div>\n                        </div>\n                        <div className=\"form-group row justify-content-end\">\n                            <div className=\"col-sm-3\">\n                                <button type=\"submit\" className=\"btn btn-success w-100\">Agregar</button>\n                            </div>\n                        </div>\n                    </form>\n                    {existeError ? <div className=\"alert alert-danger text-center\">Todos los campos son obligatorios</div> : ''}\n                </div>\n            </div>\n        );\n    }\n}\n\nFormulario.propTypes = {\n    agregarCita: PropTypes.func.isRequired\n}\nexport default Formulario;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nclass Cita extends Component {\n\n    eliminarCita = () => {\n        this.props.borrarCita(this.props.cita.id);\n    }\n    render() {\n        const {nombreMascota, nombreDuenio, fecha, hora, sintomas} = this.props.cita;\n        return (\n            <div className=\"media mt-3\">\n                <div className=\"media-body\">\n                    <h3 className=\"mt-0\">{nombreMascota}</h3>\n                    <p className=\"card-text\"><span>Nombre del Dueño:</span> {nombreDuenio}</p>\n                    <p className=\"card-text\"><span>Fecha:</span> {fecha}</p>\n                    <p className=\"card-text\"><span>Hora:</span> {hora}</p>\n                    <p className=\"card-text\"><span>Sintomas:</span> {sintomas}</p>\n                    <button className=\"btn btn-danger\" onClick={this.eliminarCita}>Borrar &times;</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nCita.propTypes = {\n    info: PropTypes.shape({\n        nombreMascota: PropTypes.string.isRequired,\n        nombreDuenio: PropTypes.string.isRequired,\n        fecha: PropTypes.string.isRequired,\n        hora: PropTypes.string.isRequired,\n        sintomas: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired\n    }),\n    borrarCita: PropTypes.func.isRequired\n}\nexport default Cita;","import React, { Component } from 'react';\nimport Cita from './Cita';\nimport PropTypes from 'prop-types';\n\nclass Listado extends Component {\n    render() {\n        return (\n            <div className=\"card mt-5\">\n                <div className=\"card-body\">\n                    <h2 className=\"card-title text-center\">{this.props.title}</h2>\n                    {Object.keys( this.props.citas ).map( key => (\n                                <Cita\n                                    key={key} \n                                    cita={this.props.citas[key]}\n                                    borrarCita={this.props.borrarCita}\n                                />\n                            ) ) }\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nListado.propTypes = {\n    title: PropTypes.string.isRequired,\n    citas: PropTypes.array.isRequired,\n    borrarCita: PropTypes.func.isRequired\n}\nexport default Listado;","import React, { Component } from 'react';\nimport '../css/App.css';\nimport Header from './Header';\nimport Formulario from './Formulario';\nimport Listado from './Listado';\n\n\nclass App extends Component {\n  \n  state = {\n    citas: []\n  }\n\n  componentDidMount() {\n    const citasLS = localStorage.getItem('citas');\n    if(citasLS) {\n      this.setState({\n        citas: JSON.parse(citasLS)\n      })\n    }\n  }\n\n  componentDidUpdate(){\n    localStorage.setItem(\n      'citas',\n      JSON.stringify(this.state.citas)\n    )\n  }\n\n  agregarCita = nuevaCita => {\n    const citas = [...this.state.citas, nuevaCita]\n\n    //ponerlo en state\n    this.setState({\n      citas\n    });  \n  }\n\n  borrarCita = id => {\n    //leer el state\n    const citasActuales = [...this.state.citas]\n\n    //borrar el elemento del state \n    const citas = citasActuales.filter(cita => cita.id !== id);\n\n    //actualizar el state\n    this.setState({\n      citas\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header \n          titulo=\"Administrador de Pacientes de Veterinaria\"\n        />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Formulario \n              agregarCita={this.agregarCita}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <Listado \n              title={(Object.keys(this.state.citas).length) ? \"Administre sus citas aquí\" : \"No hay citas aquí\"}\n              citas={this.state.citas}\n              borrarCita={this.borrarCita}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './componentes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}